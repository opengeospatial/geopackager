<?xml version="1.0" encoding="UTF-8"?>

<!--
 * applicationContext.xml
 * 
 * Copyright 2013, Compusult Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xsi:schemaLocation="
	    	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd ">

    <context:annotation-config />
    
	<bean id="geoPackagerEntryPoint" class="net.compusult.geopackage.service.GeoPackagerApplication" scope="prototype">
		<property name="router" ref="geoPackagerRouter" />
		<property name="statusService">
		    <bean class="net.compusult.geopackage.service.GeoPackagerStatusService" />
		</property>
	</bean>
	
	<bean id="geoPackagerRouter" class="org.restlet.ext.spring.SpringRouter">
	    <property name="attachments">
	        <map>
	            
	            <entry key="/wps/status/{processId}">							<!-- GET -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="wpsStatusResource" />
	                </bean>
	            </entry>
	            
	            <entry key="/wps/gpkg/{id}">									<!-- GET -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="gpkgRetrievalResource" />
	                </bean>
	            </entry>
	            
	            <entry key="/wps">												<!-- POST -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="mainWpsResource" />
	                </bean>
	            </entry>

				<entry key="/features/txn">										<!-- POST -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="startTransactionResource" />
	                </bean>
	            </entry>
	            
	            <entry key="/features/txn/{txnId}">								<!-- PUT for commit, DELETE for abort -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="completeTransactionResource" />
	                </bean>
	            </entry>

	            <entry key="/features/txn/{txnId}/{featureType}">				<!-- POST -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="createFeatureResource" />
	                </bean>
	            </entry>
	            
	            <entry key="/features/txn/{txnId}/{featureType}/{featureId}">	<!-- PUT for update, DELETE for delete -->
	                <bean class="org.restlet.ext.spring.SpringFinder">
	                    <lookup-method name="create" bean="modifyFeatureResource" />
	                </bean>
	            </entry>

	        </map>
        </property>
    </bean>
	
	<bean id="mainWpsResource" class="net.compusult.geopackage.service.resource.MainWPSResource" scope="prototype" />
	<bean id="wpsStatusResource" class="net.compusult.geopackage.service.resource.WPSStatusResource" scope="prototype" />
	<bean id="gpkgRetrievalResource" class="net.compusult.geopackage.service.resource.GeoPackageRetrievalResource" scope="prototype" />

	<bean id="startTransactionResource" class="net.compusult.geopackage.service.resource.StartTransactionResource" scope="prototype" />
	<bean id="completeTransactionResource" class="net.compusult.geopackage.service.resource.CompleteTransactionResource" scope="prototype" />
	<bean id="createFeatureResource" class="net.compusult.geopackage.service.resource.CreateFeatureResource" scope="prototype" />
	<bean id="modifyFeatureResource" class="net.compusult.geopackage.service.resource.ModifyFeatureResource" scope="prototype" />

	<!-- Singleton -->
	<bean id="geoPackagingPool" class="net.compusult.geopackage.service.geopackager.GeoPackagingPool">
	    <property name="workDirectory" value="/var/lib/geopackager" />
	    
   		<property name="executor">
			<!-- See http://www.bigsoft.co.uk/blog/index.php/2009/11/27/rules-of-a-threadpoolexecutor-pool-size -->
			<bean class="java.util.concurrent.ThreadPoolExecutor">
				<!-- corePoolSize -->
				<constructor-arg index="0" value="8"/>
				
				<!-- maximumPoolSize -->
				<constructor-arg index="1" value="20"/>
				
				<!-- keepAliveTime and units -->
				<constructor-arg index="2" value="60"/>
				<constructor-arg index="3" value="#{ T(java.util.concurrent.TimeUnit).SECONDS }"/>
				
				<!-- workQueue -->
				<constructor-arg index="4">
					<bean class="java.util.concurrent.ArrayBlockingQueue">
						<constructor-arg value="10" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
		
	</bean>

	<!-- One of these is created per WPS request -->	
	<bean id="geopackager" class="net.compusult.geopackage.service.geopackager.GeoPackager" scope="prototype" />
	
	<!-- Singleton: how we choose from multiple offerings -->
	<bean class="net.compusult.geopackage.service.geopackager.UsuallyFirstOfferingSelectionAlgorithm" />
	
	<!-- Singleton: controls creation of codecs for OWS Context -->
	<bean class="net.compusult.owscontext.codec.OWSContextCodecFactory">
	    <property name="beanNames">
	        <map>
	            <entry key="application/atom+xml" value="atomCodec" />
<!--	             <entry key="application/json" value="jsonCodec" /> -->
		    </map>
	    </property>
	</bean>
	
	<!-- Specific OWS Context codecs -->
	<bean id="atomCodec" class="net.compusult.owscontext.codec.AtomCodec" scope="prototype" />
<!-- 	<bean id="jsonCodec" class="net.compusult.owscontext.codec.JSONCodec" scope="prototype" /> -->
		
	<!-- Singleton used for reading and writing OWS Context (Atom format) -->
	<bean class="net.compusult.geometry.gml.JTSGMLConverter" />
	
	<!-- Singleton HarvesterFactory -->
	<bean class="net.compusult.geopackage.service.harvester.HarvesterFactory">
	    <property name="beanNames">
	        <map>
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wmts"      value="realWMTSHarvester" />
	            <entry key="http://www.compusult.net/offering/simple-3857-tiles"    value="simple3857Harvester" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/kml"       value="kmlHarvester" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wms"       value="wmsHarvester" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/shapefile" value="shapefileHarvester" />
<!-- 	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wfs"       value="wfsHarvester" /> -->
   	        </map>
	    </property>
	</bean>
	
	<!-- Harvesters (one created per layer being processed) -->
	<bean id="wmsHarvester"        class="net.compusult.geopackage.service.harvester.WMSHarvester"            scope="prototype" />
	<bean id="realWMTSHarvester"   class="net.compusult.geopackage.service.harvester.RealWMTSHarvester"       scope="prototype" />
	<bean id="simple3857Harvester" class="net.compusult.geopackage.service.harvester.Simple3857TileHarvester" scope="prototype" />
	<bean id="kmlHarvester"        class="net.compusult.geopackage.service.harvester.KMLHarvester"            scope="prototype" />
	<bean id="shapefileHarvester"  class="net.compusult.geopackage.service.harvester.ShapefileHarvester"      scope="prototype" />
<!-- 	<bean id="wfsHarvester"        class="net.compusult.geopackage.service.harvester.WFSHarvester"            scope="prototype" /> -->
	
	<!-- And a singleton factory to create them -->
	<bean class="net.compusult.owscontext.OfferingFactory">
	    <property name="beanNames">
	        <map>
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wms"       value="wmsOffering" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wmts"      value="wmtsOffering" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/kml"       value="kmlOffering" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/wfs"       value="wfsOffering" />
	            <entry key="http://www.opengis.net/spec/owc-atom/1.0/req/shapefile" value="shapefileOffering" />
	            	            <entry key="http://www.compusult.net/offering/simple-3857-tiles" value="simple3857Offering" />
   	        </map>
	    </property>
	</bean>
	
	<!-- Concrete Offering subclasses -->
	<bean id="wmsOffering"        class="net.compusult.owscontext.WMSOffering"             scope="prototype" />
	<bean id="wmtsOffering"       class="net.compusult.owscontext.WMTSOffering"            scope="prototype" />
	<bean id="kmlOffering"        class="net.compusult.owscontext.KMLOffering"             scope="prototype" />
	<bean id="wfsOffering"        class="net.compusult.owscontext.WFSOffering"             scope="prototype" />
	<bean id="shapefileOffering"  class="net.compusult.owscontext.ShapefileOffering"       scope="prototype" />
	<bean id="simple3857Offering" class="net.compusult.owscontext.Simple3857TilesOffering" scope="prototype" />

	<!-- Singleton -->
	<bean class="net.compusult.geopackage.service.resource.helper.TemplateManager">
	    <property name="contactInfo">
			<bean class="net.compusult.geopackage.service.resource.helper.ContactInfo">
				<property name="company"    value="Compusult Ltd." />
				<property name="url"        value="http://www.compusult.net/" />
				<property name="name"       value="Sean Hogan" />
				<property name="title"      value="Project Engineer" />
				<property name="email"      value="sean@compusult.net" />
				<property name="voice"      value="+1 709 745-7914" />
				<property name="fax"        value="+1 709 745-7927" />
				<property name="addr"       value="40 Bannister Street" />
				<property name="city"       value="Mount Pearl" />
				<property name="prov"       value="NL" />
				<property name="country"    value="Canada" />
				<property name="postalCode" value="A1N 1W1" />
		   	</bean>
	    </property>
	</bean>
	
	<!-- Initialize the singleton Proj4J coordinate reference system and transform factories. -->
	<bean class="org.osgeo.proj4j.CRSFactory" />
	<bean class="org.osgeo.proj4j.CoordinateTransformFactory" />
	
</beans>
